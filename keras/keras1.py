from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import numpy as np
import sys
from sklearn.cross_validation import train_test_split
from keras.models import Sequential
from keras.layers import Dense, Activation
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, GaussianDropout
from keras.layers import Convolution2D, MaxPooling2D, LocallyConnected2D
from keras.optimizers import SGD
from keras.optimizers import Adam
from keras.utils import np_utils
from keras.regularizers import l2, activity_l2
import pandas as pd

'''
X_train = np.load('./X_large_train_1.npy')   
y_train = np.genfromtxt('./y_large_train.txt')

X_test = np.load('./X_large_test_1.npy')   
y_test = np.genfromtxt('./y_large_test.txt')

print (X_test.shape)
print ("X_test shape")
print ("X_test and y_test lengths: %i %i respectively",(X_test.shape,y_test.shape))
X_train,X_test,y_train,y_test = train_test_split(X_train, y_train, test_size=0.1, random_state=42, stratify=y_train)
X_train,X_val,y_train,y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=42, stratify=y_train)
'''
X_train = np.load('./npys/X_large_train_subset_10000.npy')   
y_train = np.genfromtxt('./data/y_large_train_subset_10000.txt')

#X_test = np.load('./X_small_test_1.npy')   
#y_test = np.genfromtxt('../data/y_small_test.txt')
X_train,X_test,y_train,y_test = train_test_split(X_train, y_train, test_size=0.1, random_state=42)


print (X_test.shape)
print ("X_test shape")
print ("X_test and y_test lengths: %i %i respectively",(X_test.shape,y_test.shape))

batch_size = 50
nb_classes = 10
nb_epoch = 100
data_augmentation = False

# input image dimensions
img_rows, img_cols = 32, 32
# the CIFAR10 images are RGB
img_channels = 3

# convert class vectors to binary class matrices
y_train = y_train.astype(int)
y_test = y_test.astype(int)
y_train = np_utils.to_categorical(y_train, nb_classes)
y_test = np_utils.to_categorical(y_test, nb_classes)

model = Sequential()


model.add(Convolution2D(32, 3, 3,border_mode='same',input_shape=X_train.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))


model.add(Convolution2D(64, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))


model.add(Convolution2D(128, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))


model.add(Convolution2D(256, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))

model.add(Convolution2D(512, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2),strides=(1,1)))


model.add(Flatten())
model.add(Dense(4096))
model.add(Dense(4096))
model.add(Dense(1000))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(nb_classes))
model.add(Activation('softmax'))


model.compile(loss='categorical_crossentropy',
              optimizer='adadelta',
              metrics=['accuracy'])


if not data_augmentation:
    print('Not using data augmentation.')
    model.fit(X_train, y_train,
              batch_size=batch_size,
              nb_epoch=nb_epoch,
              validation_split=0.33,
              shuffle=True)
else:
    print('Using real-time data augmentation.')

    # this will do preprocessing and realtime data augmentation
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=False,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # compute quantities required for featurewise normalization
    # (std, mean, and principal components if ZCA whitening is applied)
    datagen.fit(X_train)

    # fit the model on the batches generated by datagen.flow()
    model.fit_generator(datagen.flow(X_train, y_train,
                        batch_size=batch_size),
                        samples_per_epoch=X_train.shape[0],
                        nb_epoch=nb_epoch,
                        )


score = model.evaluate(X_test, y_test, verbose=1)
print('Test score:', score[0])
print('Test accuracy:', score[1])
thefile = open('./outputscores.txt', 'w')
for item in score:
  thefile.write("%s\n" % item)





